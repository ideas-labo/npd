daemon_memcached_w_batch_size	Specifies how many memcached write operations, such as add, set, and incr, to perform before doing a COMMIT to start a new transaction. This value is set to 1 by default, on the assumption that data being stored is important to preserve in case of an outage and should immediately be committed. When storing noncritical data, you might increase this value to reduce the overhead from frequent commits; but then the last N minus 1 uncommitted write operations could be lost if a crash occurs.	4
storage_engine	The default storage engine for tables. VOTHER: The default storage engine in MySQL 5.6. INNODB is a transaction-safe (ACID compliant) storage engine for MySQL that has commit, rollback, and crash-recovery capabilities to protect user data. INNODB row-level locking (without escalation to coarser granularity locks) and Oracle-style consistent nonlocking reads increase multi user concurrency and performance. INNODB stores user data in clustered indexes to reduce I/O for common queries based on primary keys. To maintain data integrity, INNODB also supports FOREIGN KEY referential-integrity constraints. VOTHER: These tables have a small footprint. Table-level locking limits the performance in read/write workloads, so it is often used in read-only or read-mostly workloads in Web and data warehousing configurations.	4
transaction_isolation	The transaction isolation level. The isolation level is the setting that fine-tunes the balance between performance and reliability, consistency, and reproducibility of results when multiple transactions are making changes and performing queries at the same time. You can enforce a high degree of consistency with the default VOTHER level, for operations on crucial data where ACID compliance is important. Or you can relax the consistency rules with VOTHER or even VOTHER, in situations such as bulk reporting where precise consistency and repeatable results are less important than minimizing the amount of overhead for locking. VOTHER enforces even stricter rules than VOTHER, and is used mainly in specialized situations, such as with XA transactions and for troubleshooting issues with concurrency and deadlocks.	4
innodb_autoinc_lock_mode	The lock mode to use for generating auto increment values. It can significantly improve scalability and performance of SQL statements that add rows to tables with AUTOINCREMENT columns. VDISABLE: In this lock mode, all "INSERT-like" statements obtain a special table-level AUTO-INC lock for inserts into tables with AUTOINCREMENT columns. VOTHER: In this mode, "bulk inserts" use the special AUTO-INC table-level lock and hold it until the end of the statement. Simply put, this lock mode significantly improves scalability while being safe for use with statement-based replication. VOTHER: In this lock mode, no "INSERT-like" statements use the table-level AUTO-INC lock, and multiple statements can execute at the same time. This is the fastest and most scalable lock mode, but it is not safe when using statement-based replication or recovery scenarios when SQL statements are replayed from the binary log.	4
innodb_api_trx_level	Controls the transaction isolation level on queries processed by the memcached interface. From highest amount of consistency and protection to the least, the isolation levels supported by INNODB are: VOTHER, VOTHER, VOTHER, and VOTHER.	4
innodb_compression_level	Specifies the level of zlib compression to use for INNODB compressed tables and indexes. A higher value lets you fit more data onto a storage device, at the expense of more CPU overhead during compression. A lower value lets you reduce CPU overhead when storage space is not critical, or you expect the data is not especially compressible.	4
innodb_default_row_format	The CSELF option defines the default row format for INNODB tables and user-created temporary tables. VOTHER: The VOTHER row format is similar to the VOTHER row format, but tables using the VOTHER row format can store even more data on overflow pages than tables using the VOTHER row format. This results in more efficient data storage than tables using the VOTHER row format, especially for tables containing columns using the VARBINARY, VARCHAR, BLOB and TEXT data types. However, INNODB tables using the VOTHER row format are more efficient. VOTHER: The VOTHER row format is similar to the VOTHER row format, but tables using the VOTHER row format can store even more data on overflow pages than tables using the VOTHER row format. This results in more efficient data storage than tables using the VOTHER row format, especially for tables containing columns using the VARBINARY, VARCHAR, BLOB and TEXT data types. VOTHER: The VOTHER row format is similar to the VOTHER row format, but it stores data in a more compact manner that requires about 20% less storage. VOTHER: The VOTHER row format is the original noncompacted row format.	4
innodb_doublewrite	The CSELF variable controls whether the doublwrite buffer is enabled. You might consider disabling the doublewrite buffer if you are more concerned with performance than data integrity.	4
innodb_fast_shutdown	The INNODB shutdown mode. If the value is VOTHER, INNODB does a slow shutdown, a full purge and a change buffer merge before shutting down. If the value is VOTHER (the default), INNODB skips these operations at shutdown, a process known as a fast shutdown. If the value is VOTHER, INNODB flushes its logs and shuts down cold, as if MySQL had crashed; no committed transactions are lost, but the crash recovery operation makes the next startup take longer.	4
innodb_flush_log_at_trx_commit	Controls the balance between strict ACID compliance for commit operations and higher performance that is possible when commit related I/O operations are rearranged and done in batches. You can achieve better performance by changing the default value but then you can lose transactions in a crash. VOTHER: The default setting of VOTHER is required for full ACID compliance. Logs are written and flushed to disk at each transaction commit. VOTHER: With a setting of VOTHER, logs are written after each transaction commit and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash. VOTHER: With a setting of VOTHER, logs are written and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.	4
BrotliCompressionQuality	The CSELF directive specifies the compression quality (a value between VOTHER and VOTHER). Higher quality values result in better, but also slower compression.	4
DeflateCompressionLevel	The CSELF directive specifies what level of compression should be used, the higher the value, the better the compression, but the more CPU time is required to achieve this.	4
DeflateWindowSize	The CSELF directive specifies the zlib compression window size (a value between VOTHER and VOTHER). Generally, the higher the window size, the higher can the compression ratio be expected.	4
H2Padding	Determine the range of padding bytes added to payload frames. While more padding bytes give better message length obfuscation, they are also additional traffic.	4
H2SerializeHeaders	This directive toggles if HTTP2 requests shall be serialized in HTTP1.1 format for processing by httpd core or if received binary data shall be passed into the request_recs directly. Serialization will lower performance, but gives more backward compatibility in case custom filters/hooks need it.	4
LuaScope	Specify the life cycle scope of the Lua interpreter which will be used by handlers in this "Directory." The default is VOTHER. VOTHER: use the interpreter once and throw it away. VOTHER: use the interpreter to handle anything based on the same file within this request, which is also request scoped. VOTHER: Same as request but attached to the connection_rec. VOTHER: Use the interpreter for the lifetime of the thread handling the request (only available with threaded MPMs). VOTHER: This one is different than others because the server scope is quite long lived, and multiple threads will have the same server_rec. To accommodate this, server scoped Lua states are stored in an apr resource list. The min and max arguments specify the minimum and maximum number of Lua states to keep in the pool. Generally speaking, the thread and server scopes execute roughly 2-3 times faster than the rest, because they don't have to spawn new Lua states on every request (especially with the event MPM, as even keepalive requests will use a new thread for each request). If you are satisfied that your scripts will not have problems reusing a state, then the VOTHER or VOTHER scopes should be used for maximum performance. While the VOTHER scope will provide the fastest responses, the VOTHER scope will use less memory, as states are pooled, allowing f.x. 1000 threads to share only 100 Lua states, thus using only 10% of the memory required by the VOTHER scope.	4
KeepAliveTimeout	The number of seconds Apache httpd will wait for a subsequent request before closing the connection. The tradeoff here is between network bandwidth and server resources. Setting CSELF to a high value may cause performance problems in heavily loaded servers. In no event should you raise this above about 60 seconds, as most of the benefits are lost.	4
MDStaplingRenewWindow	The CA issuing a certificate commonly also operates the OCSP responder service and determines how long its signed response about the validity of a certificate are itself valid. The longer a response is valid, the longer it can be cached which mean better overall performance for everyone. The shorter the life time, the more rapidly certificate revocations spread to clients. Also, service reliability is a consideration. By adjusting the stapling renew window you can control parts of this yourself. If you make the renew time short (e.g. a short time before the current information expires), you gain maximum cache time. But a service outage (down for maintenance, for example) will affect you. If you renew a long time before expiry, updates will be made more frequent, cause more load on the CA server infrastructure and also more coordination between the child processes of your server.	4
VHostSecure	Determines whether the virtual host processes requests with security enhanced by removal of Privileges that are rarely needed in a webserver, but which are available by default to a normal Unix user and may therefore be required by modules and applications.	4
SSLProxyEngine	This is usually used inside a COTHER section to enable SSL/TLS for proxy usage in a particular virtual host.	4
LDAPVerifyServerCert	Specifies whether to force the verification of a server certificate when establishing an SSL connection to the LDAP server.	4
SSLStaplingStandardCacheTimeout	Number of seconds before expiring responses in the OCSP stapling cache	4
SSLCipherSuite	This complex directive uses a colon-separated cipher-spec string consisting of OpenSSL cipher specifications to configure the Cipher Suite the client is permitted to negotiate in the SSL handshake phase.	4
SecureListen	Enables SSL encryption for the specified port.	4
SessionMaxAge	The CSELF directive defines a time limit for which a session will remain valid. When a session is saved, this time limit is reset and an existing session can be continued. If a session becomes older than this limit without a request to the server to refresh the session, the session will time out and be removed.	4
PrivilegesMode	This directive trades off performance vs security against malicious, privileges-aware code. In VOTHER mode, each request runs in a secure subprocess, incurring a substantial performance penalty. In VOTHER mode, the server is not protected against escalation of privileges as discussed above.	4
MDStaplingRenewWindow	Control when the stapling responses will be renewed. The longer a response is valid, the longer it can be cached which mean better overall performance for everyone. The shorter the life time, the more rapidly certificate revocations spread to clients. Also, service reliability is a consideration.	4
net.compression.compressors	Specifies the default compressor to use for communication between this mongod or mongos instance. VOTHER: A compression/decompression library designed to balance efficient computation requirements with reasonable compression rates; VOTHER: A data compression library that provides higher compression rates at the cost of more CPU, compared to MongoDB’s use of VOTHER; VOTHER: A data compression library that provides higher compression rates and lower CPU usage when compared to VOTHER.	4
security.enableEncryption	Enables encryption for the WIREDTIGER storage engine. You must set to VENABLE to pass in encryption keys and configurations.	4
net.tls.mode	Enables TLS used for all network connections. The argument to the CSELF setting can be one of the following. VDISABLE: The server does not use TLS; VOTHER: Connections between servers do not use TLS, for incoming connections, the server accepts both TLS and non TLS; VOTHER: Connections between servers use TLS, for incoming connections, the server accepts both TLS and non TLS; VOTHER: The server uses and accepts only TLS encrypted connections.	4
net.ssl.mode	Enables TLS/SSL or mixed TLS/SSL used for all network connections. The argument to the COTHER setting can be one of the following. VDISABLE: The server does not use TLS/SSL; VOTHER: Connections between servers do not use TLS/SSL, For incoming connections, the server accepts both TLS/SSL and non TLS / non SSL; VOTHER: Connections between servers use TLS/SSL, For incoming connections, the server accepts both TLS/SSL and non TLS / non SSL; VOTHER: The server uses and accepts only TLS/SSL encrypted connections.	4
security.authorization	Enable or disable Role-Based Access Control (RBAC) to govern each user's access to database resources and operations.	4
security.ldap.transportSecurity	By default, mongod or mongos creates a TLS/SSL secured connection to the LDAP server. Set CSELF to VDISABLE to disable TLS/SSL between mongod or mongos and the LDAP server.	4
storage.journal.enabled	Enable or disable the durability journal to ensure data files remain valid and recoverable.	4
storage.journal.commitIntervalMs	The maximum amount of time in milliseconds that the mongod process allows between journal operations. Values can range from VOTHER to VOTHER milliseconds. Lower values increase the durability of the journal, at the expense of disk performance.	4
storage.engine	The storage engine for the mongod database. VOTHER: By avoiding disk I/O, the in-memory storage engine allows for more predictable latency of database operations. VOTHER: MongoDB 3.0 provides more granular document-level concurrency control, delivering between 7 and 10 times greater throughput for most write-intensive applications, while maintaining predictable low latency. Implementing concurrency control at the document level improves performance significantly when compared to the previous MongoDB 2.6 release. In each test, predictable low latency is maintained as the workload is scaled. Come back to our blog where we will post benchmark results. VOTHER: The updated MongoDB MMAPV storage engine implements collection level concurrency control while the new MongoDB VOTHER storage engine further improves performance for many workloads by implementing concurrency control at the document level.	4
storage.wiredTiger.engineConfig.journalCompressor	Specifies the type of compression to use to compress WIREDTIGER journal. VOTHER: A compression/decompression library designed to balance efficient computation requirements with reasonable compression rates; VOTHER: A data compression library that provides higher compression rates at the cost of more CPU, compared to MongoDB's use of VOTHER; VOTHER: A data compression library that provides higher compression rates and lower CPU usage when compared to VOTHER.	4
storage.wiredTiger.indexConfig.prefixCompression	Enables or disables prefix compression for index data. Specify VENABLE for CSELF to enable prefix compression for index data, or VDISABLE to disable prefix compression for index data.	4
replication.enableMajorityReadConcern	Read concern majority is available for use with causally consistent sessions. A query with read concern "majority" returns data that has been acknowledged by a majority of the replica set members. In general, avoid disabling "majority" read concern unless necessary. However, if you have a three-member replica set with a primary-secondary-arbiter (PSA) architecture or a sharded cluster with a three-member PSA shards, disable to prevent the storage cache pressure from immobilizing the deployment.	4
security.ldap.validateLDAPServerConfig	A flag that determines if the mongod or mongos instance checks the availability of the LDAP server as part of its startup: If VENABLE, the mongod or mongos instance performs the availability check and only continues to start up if the LDAP server is available. If VDISABLE, the mongod or mongos instance skips the availability check; i.e. the instance starts up even if the LDAP server is unavailable.	4
ldapConnectionPoolIdleHostTimeoutSecs	The maximum number of seconds that the pooled connections to an LDAP server can remain idle before being closed.	4
scramIterationCount	Changes the number of hashing iterations used for all new SCRAMSHA passwords. More iterations increase the amount of time required for clients to authenticate to MongoDB, but makes passwords less susceptible to brute-force attempts.	4
authFailedDelayMs	The number of milliseconds to wait before informing clients that their authentication attempt has failed. Setting this parameter makes brute-force login attacks on a database more time-consuming. However, clients waiting for a response from the MongoDB server still consume server resources, and this may adversely impact benign login attempts if the server is denying access to many other clients simultaneously.	4
shardedConnPoolIdleTimeoutMinutes	Sets the time limit that a connection in the legacy sharded cluster connection pool can remain idle before being closed.	4
globalConnPoolIdleTimeoutMinutes	Sets the time limit that connection in the legacy global connection pool can remain idle before being closed.	4
maxLogSizeKB	Specifies the maximum size, in kilobytes, for a log line. Using a large value for CSELF may adversely affect system performance and negatively impact database operations.	4
journalCommitInterval	Specify an integer between VOTHER and VOTHER signifying the number of milliseconds (ms) between journal commits.	4
ssl	Enables SSL connections.	4
wal_level	CSELF determines how much information is written to the WAL. The default value is VOTHER, which writes enough data to support WAL archiving and replication, including running read-only queries on a standby server. Using a level of VOTHER will increase the WAL volume. VOTHER removes all logging except the information required to recover from a crash or immediate shutdown, which can make those operations much faster.	4
fsync	If this parameter is VENABLE, the PGSQL server will try to make sure that updates are physically written to disk, by issuing fsync() system calls or various equivalent methods (see COTHER). This ensures that the database cluster can recover to a consistent state after an operating system or hardware crash. While turning off fsync is often a performance benefit, this can result in unrecoverable data corruption in the event of a power failure or system crash.	4
synchronous_commit	Specifies whether transaction commit will wait for WAL records to be written to disk before the command returns a "success" indication to the client. So, turning CSELF off can be a useful alternative when performance is more important than exact certainty about the durability of a transaction.	4
full_page_writes	When this parameter is VENABLE, the PostgreSQL server writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint. Turning this parameter off speeds normal operation, but might lead to either unrecoverable data corruption, or silent data corruption, after a system failure.	4
wal_compression	Turning this parameter on can reduce the WAL volume without increasing the risk of unrecoverable data corruption, but at the cost of some extra CPU spent on the compression during WAL logging and on the decompression during WAL replay.	4
checkpoint_timeout	Maximum time between automatic WAL checkpoints. Increasing this parameter can increase the amount of time needed for crash recovery.	4
max_wal_size	Maximum size to let the WAL grow to between automatic WAL checkpoints. Increasing this parameter can increase the amount of time needed for crash recovery.	4
geqo_effort	Controls the trade-off between planning time and query plan quality in GEQO. This variable must be an integer in the range from VOTHER to VOTHER. The default value is VOTHER. Larger values increase the time spent doing query planning, but also increase the likelihood that an efficient query plan will be chosen.	4
default_transaction_isolation	Each SQL transaction has an isolation level, which can be either VOTHER, VOTHER, VOTHER, or VOTHER. This parameter controls the default isolation level of each new transaction. The default is VOTHER. VOTHER: Dirty Read Possible, Nonrepeatable Read Possible, Phantom Read Possible; VOTHER: Dirty Read Not possible, Nonrepeatable Read Possible, Phantom Read Possible; VOTHER: Dirty Read Not possible, Nonrepeatable Read Not possible, Phantom Read; Possible; VOTHER: Dirty Read Not possible, Nonrepeatable Read Not possible, Phantom Read Not possible.	4
SecureListen	Enables SSL encryption for the specified port.	4
authenticate_cache_garbage_interval	The time period between garbage collection across the username cache. This is a trade-off between memory utilization and CPU. Only change if you have good reason to.	4
maximum_object_size	Set the default value for max-size parameter on any cache_dir. The value is specified in bytes, and the default is 4 MB. If you wish to get a high BYTES hit ratio, you should probably increase this (one 32 MB object hit counts for 3200 10KB hits). If you wish to increase hit ratio more than you want to save bandwidth you should leave this low. If using the LFUDA replacement policy you should increase this value to maximize the byte hit rate improvement of LFUDA! See cache_replacement_policy for a discussion of this policy.	4
memory_cache_shared	Controls whether the memory cache is shared among SMP workers. The shared memory cache is meant to occupy COTHER bytes and replace the non-shared memory cache, although some entities may still be cached locally by workers for now (e.g., internal and in-transit objects may be served from a local memory cache even if shared memory caching is enabled). By default, the memory cache is shared if and only if all of the following conditions are satisfied : Squid runs in SMP mode with multiple workers, cache_mem is positive, and Squid environment supports required IPC primitives (e.g., POSIX shared memory segments and GCC-style atomic operations). To avoid blocking locks, shared memory uses opportunistic algorithms that do not guarantee that every cachable entity that could have been shared among SMP workers will actually be shared.	4
ftp_sanitycheck	For security and data integrity reasons Squid by default performs sanity checks of the addresses of FTP data connections ensure the data connection is to the requested server. If you need to allow FTP connections to servers using another IP address for the data connection turn this off.	4
appendonly	By default Redis asynchronously dumps the dataset on disk. This mode is good enough in many applications, but an issue with the Redis process or a power outage may result into a few minutes of writes lost (depending on the configured save points). The Append Only File is an alternative persistence mode that provides much better durability. For instance using the default data fsync policy (see later in the config file) Redis can lose just one second of writes in a dramatic event like a server power outage, or a single write if something wrong with the Redis process itself happens, but the operating system is still running correctly. AOF and RDB persistence can be enabled at the same time without problems. If the AOF is enabled on startup Redis will load the AOF, that is the file with the better durability guarantees.	4
no-appendfsync-on-rewrite	When the AOF fsync policy is set to always or everysec, and a background saving process (a background save or AOF log background rewriting) is performing a lot of I/O against the disk, in some Linux configurations Redis may block too long on the fsync() call. Note that there is no fix for this currently, as even performing fsync in a different thread will block our synchronous write(2) call. In order to mitigate this problem it's possible to use the following option that will prevent fsync() from being called in the main process while a BGSAVE or BGREWRITEAOF is in progress. This means that while another child is saving, the durability of Redis is the same as "appendfsync none". In practical terms, this means that it is possible to lose up to 30 seconds of log in the worst scenario (with the default Linux settings).If you have latency problems turn this to VENABLE. Otherwise leave it as VDISABLE that is the safest pick from the point of view of durability.	4
sendAuthInfoResponseHeaders	Controls whether the auth information (remote user and auth type) shall be returned as response headers for a forwarded/proxied request. When the RemoteIpValve or RemoteIpFilter mark a forwarded request with the Globals.REQUEST_FORWARDED_ATTRIBUTE this authenticator can return the values of HttpServletRequest.getRemoteUser() and HttpServletRequest.getAuthType() as response headers remote-user and auth-type to a reverse proxy. This is useful, e.g., for access log consistency or other decisions to make. If not specified, the default value is VDISABLE.	4
appendfsync	The fsync() call tells the Operating System to actually write data on disk instead of waiting for more data in the output buffer. Some OS will really flush data on disk, some other OS will just try to do it ASAP. Redis supports three different modes : VDISABLE : don't fsync, just let the OS flush the data when it wants, which is Faster. VENABLE : fsync after every write to the append only log, which is slow but safest. VOTHER : fsync only one time every second, compromise. The default is VOTHER, as that's usually the right compromise between speed and data safety. It's up to you to understand if you can relax this to VDISABLE that will let the operating system flush the output buffer when it wants, for better performance (but if you can live with the idea of some data loss consider the default persistence mode that's snapshotting), or on the contrary, use VENABLE that's very slow but a bit safer than VOTHER.	4
compression	The Connector may use HTTP/1.1 GZIP compression in an attempt to save server bandwidth. The acceptable values for the parameter is VDISABLE (disable compression), VENABLE (allow compression, which causes text data to be compressed), VOTHER (forces compression in all cases), or a numerical integer value (which is equivalent to VENABLE, but specifies the minimum amount of data before the output is compressed). If the content-length is not known and compression is set to "on" or more aggressive, the output will also be compressed. If not specified, this attribute is set to VDISABLE.	4
pollTime	Duration of a poll call in microseconds. Lowering this value will slightly decrease latency of connections being kept alive in some cases, but will use more CPU as more poll calls are being made. The default value is 2000 (2ms).	4
crossContext	Set to VENABLE if you want calls within this application to ServletContext.getContext() to successfully return a request dispatcher for other web applications running on this virtual host. Set to VDISABLE (the default) in security conscious environments, to make getContext() always return null.	4
ssl_engine	The OpenSSL engine to use. You will need to set this if you would like to use hardware SSL acceleration for example.	4
repl-disable-tcp-nodelay	Disable TCP_NODELAY on the replica socket after SYNC? If you select "yes" Redis will use a smaller number of TCP packets and less bandwidth to send data to replicas. But this can add a delay for the data to appear on the replica side, up to 40 milliseconds with Linux kernels using a default configuration. If you select "no" the delay for data to appear on the replica side will be reduced but more bandwidth will be used for replication. By default we improve for low latency, but in very high traffic conditions or when the master and replicas are many hops away, turning this to "yes" may be a good idea.	4
gtid_cleanup_batch_size	Normally does not need tuning. How many old rows must accumulate in the mysql.gtid_slave_pos table before a background job will be run to delete them. Can be increased to reduce number of commits if using many different engines with COTHER, or to reduce CPU overhead if using a huge number of different COTHER. Can be decreased to reduce number of old rows in the table.	4
innodb_doublewrite	If set to VENABLE, the default, to improve fault tolerance InnoDB first stores data to a doublewrite buffer before writing it to data file, Disabling will provide a marginal performance improvement.	4
innodb_force_recovery	XtraDB/InnoDB crash recovery mode. VOTHER is the default. The other modes are for recovery purposes only, and no data can be changed while another mode is active. Some queries relying on indexes are also blocked. See XtraDB/InnoDB Recovery Modes for more on mode specifics.	4
innodb_ibuf_max_size	Maximum size in bytes of the insert buffer. Defaults to half the size of the buffer pool so you may want to reduce if you have a very large buffer pool. If set to 0, the insert buffer is disabled, which will cause all secondary index updates to be performed synchronously, usually at a cost to performance. This Percona XtraDB variable has not been ported to XtraDB 5.6.	4
innodb_log_file_size	Size in bytes of each InnoDB redo log file in the log group. The combined size can be no more than 4GB prior to MariaDB 10.0, and no more than 512GB in MariaDB 10.0 and later. Larger values mean less disk I/O due to less flushing checkpoint activity, but also slower recovery from a crash.	4
innodb_stats_persistent_sample_pages	Number of index pages sampled when estimating cardinality and statistics for indexed columns. Increasing this value will increases index statistics accuracy, but use more I/O resources when running ANALYZE TABLE.	4
innodb_stats_sample_pages	Gives control over the index distribution statistics by determining the number of index pages to sample. Higher values produce more disk I/O, but, especially for large tables, produce more accurate statistics and therefore make more effective use of the query-optimizer. Lower values than the default are not recommended, as the statistics can be quite inaccurate.	4
innodb_support_xa	If set to VENABLE, the default, XA transactions are supported. XA support ensures data is written to the binary log in the same order to the actual database, which is critical for replication and disaster recovery, but comes at a small performance cost. If your database is set up to only permit one thread to change data (for example, on a replication slave with only the replication thread writing), it is safe to turn this option off.	4
innodb_use_purge_thread	Usually with InnoDB, data changed by a transaction is written to an undo space to permit read consistency, and freed when the transaction is complete, Many, or large, transactions, can cause the main tablespace to grow dramatically, reducing performance. This option, introduced in XtraDB 5.1 and removed for 5.5, allows multiple threads to perform the purging, resulting in slower, but much more stable performance.	4
rocksdb_enable_2pc	Enable two phase commit for MyRocks. When set, MyRocks will keep its data consistent with the binary log (in other words, the server will be a crash-safe master). The consistency is achieved by doing two-phase XA commit with the binary log.	4
thread_pool_exact_stats	If set to VENABLE, provides better queueing time statistics by using a high precision timestamp, at a small performance cost, for the time when the connection was added to the queue. This timestamp helps calculate the queuing time shown in the Information Schema Threadpool_Queues table.	4
thread_pool_oversubscribe	Determines how many worker threads in a thread group can remain active at the same time once a thread group is oversubscribed due to stalls. The default value is 3. Usually, a thread group only has one active worker thread at a time. However, the timer thread can add more active worker threads to a thread group if it detects a stall. There are trade-offs to consider when deciding whether to allow only one thread per CPU to run at a time, or whether to allow more than one thread per CPU to run at a time. Allowing only one thread per CPU means that the thread can have unrestricted access to the CPU while its running, but it also means that there is additional overhead from putting threads to sleep or waking them up more frequently. Allowing more than one thread per CPU means that the threads have to share the CPU, but it also means that there is less overhead from putting threads to sleep or waking them up.	4
tokudb_commit_sync	Whether or not the transaction log is flushed upon transaction commit. Flushing has a minor performance penalty, but switching it off means that committed transactions may not survive a server crash.	4
