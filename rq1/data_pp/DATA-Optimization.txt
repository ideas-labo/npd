innodb_adaptive_flushing	Specifies whether to dynamically adjust the rate of flushing dirty pages in the INNODB buffer pool based on the workload. Adjusting the flush rate dynamically is intended to avoid bursts of I/O activity. This setting is enabled by default.	1
bulk_insert_buffer_size	This variable limits the size of the cache tree in bytes per thread. MyISAM uses a special tree-like cache to make bulk inserts faster for INSERT ... SELECT, INSERT ... VALUES (...), (...), ..., and LOAD DATA when adding data to nonempty tables. Setting it to VDISABLE disables this optimization.	1
delay_key_write	This variable specifies how to use delayed key writes. It applies only to MyISAM tables. Delayed key writing causes key buffers not to be flushed between writes. If DELAY_KEY_WRITE is enabled for a table, the key buffer is not flushed for the table on every index update, but only when the table is closed. This speeds up writes on keys a lot, but if you use this feature, you should add automatic checking of all MyISAM tables by starting the server with the COTHER system variable set.	1
concurrent_insert	If VENABLE (the default), MySQL permits INSERT and SELECT statements to run concurrently for MyISAM tables that have no free blocks in the middle of the data file. If VDISABLE, disables concurrent inserts. If VENABLE, enables concurrent inserts for all MyISAM tables, even those that have holes.	1
large_pages	Whether large page support is enabled. Applications that perform a lot of memory accesses may obtain performance improvements by using large pages due to reduced Translation Lookaside Buffer (TLB) misses.	1
innodb_adaptive_hash_index	Whether the INNODB adaptive hash index is enabled or disabled. It may be desirable, depending on your workload, to dynamically enable or disable adaptive hash indexing to improve query performance. Because the adaptive hash index may not be useful for all workloads, conduct benchmarks with it both enabled and disabled, using realistic workloads.	1
innodb_buffer_pool_dump_at_shutdown	Specifies whether to record the pages cached in the INNODB buffer pool when the MySQL server is shut down, to shorten the warmup process at the next restart.	1
innodb_buffer_pool_load_at_startup	Specifies that, on MySQL server startup, the INNODB buffer pool is automatically warmed up by loading the same pages it held at an earlier time.	1
innodb_change_buffering	Whether INNODB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially.	1
innodb_flush_neighbors	Specifies whether flushing a page from the INNODB buffer pool also flushes other dirty pages in the same extent. Flushing such neighbor pages in one operation reduces I/O overhead (primarily for disk seek operations) compared to flushing individual pages at different times.	1
AuthLDAPCompareDNOnServer	When set, CSELF will use the LDAP server to compare the DNs. It is possible to get false negatives with this approach, but it is much faster. Note the CSELF can speed up DN comparison in most situations.	1
BalancerMember	This directive adds a member to a load balancing group.	1
BufferedLogs	The CSELF directive causes COTHER to store several log entries in memory and write them together to disk, rather than writing them after each request. On some systems, this may result in more efficient disk access and hence higher performance.	1
CacheEnable	Enable caching of specified URLs using a specified storage manager.	1
CacheLock	The CSELF directive enables the thundering herd lock for the given URL space.	1
CacheReadTime	The CSELF directive sets the minimum amount of elapsed time that should pass before making an attempt to send data downstream to the client. During the time period, data will be buffered before sending the result to the client. This can improve performance when caching content from a reverse proxy. The default of VDISABLE disables this option.	1
CacheSocacheReadTime	The CSELF directive sets the minimum amount of elapsed time that should pass before making an attempt to send data downstream to the client. During the time period, data will be buffered before sending the result to the client. This can improve performance when caching content from a reverse proxy. The default of VDISABLE disables this option.	1
CacheReadSize	The CSELF directive sets the minimum amount of data, in bytes, to be read from the backend before the data is sent to the client. Setting this to a higher value causes the disk cache to buffer at least this amount before sending the result to the client. This can improve performance when caching content from a reverse proxy.	1
EnableMMAP	This directive controls whether the httpd may use memory-mapping if it needs to read the contents of a file during delivery. This memory-mapping sometimes yields a performance improvement.	1
EnableSendFile	This directive controls whether httpd may use the sendfile support from the kernel to transmit file contents to the client. This sendfile mechanism avoids separate read and send operations, and buffer allocations.	1
H2CopyFiles	This directive influences how file content is handled in responses. When off, which is the default, file handles are passed from the requestion processing down to the main connection, using the usual Apache setaside handling for managing the lifetime of the file. When set to VENABLE, file content is copied while the request is still being processed and the buffered data is passed on to the main connection. This is better if a third party module is injecting files with different lifetimes into the response.	1
H2Direct	This directive toggles the usage of the HTTP2 Direct Mode. Direct communication means that if the first bytes received by the server on a connection match the HTTP2 preamble, the HTTP2 protocol is switched to immediately without further negotiation. For clients that have out-of-band knowledge about a server supporting h2c, direct HTTP2 saves the client from having to perform an HTTP1.1 upgrade, resulting in better performance and avoiding the Upgrade restrictions on request bodies.	1
H2Push	This directive toggles the usage of the HTTP2 server push protocol feature. The HTTP2 protocol allows the server to push other resources to a client when it asked for a particular one. This is helpful if those resources are connected in some way and the client can be expected to ask for it anyway. The pushing then saves the time it takes the client to ask for the resources itself. On the other hand, pushing resources the client never needs or already has is a waste of bandwidth.	1
H2PushDiarySize	Specifies the number of maximum entities stored in the push diary. The push diary records a digest (currently using a 64 bit number) of pushed resources (their URL) to avoid duplicate pushes on the same connection.	1
KeepAlive	The Keep-Alive extension to HTTP1.0 and the persistent connection feature of HTTP1.1 provide long-lived HTTP sessions which allow multiple requests to be sent over the same TCP connection. In some cases this has been shown to result in an almost 50% speedup in latency times for HTML documents with many images.	1
ListenCoresBucketsRatio	A ratio between the number of (online) CPU cores and the number of listeners' buckets can be used to make Apache HTTP Server create COTHER / CSELF listening buckets, each containing its own Listening socket on the same port, and then make each child handle a single bucket. CSELF can improve the scalability when accepting new connections is/becomes the bottleneck. On systems with a large number of CPU cores, enabling this feature has been tested to show significant performances improvement and shorter responses time.	1
MDStapling	CSELF offers an implementation for providing OCSP stapling information. OCSP Stapling is a pretty simple check that web servers should turn on to provide a performance benefit to any browsers which do OCSP checking	1
SSLUseStapling	This option enables OCSP stapling, as defined by the "Certificate Status Request" TLS extension specified in RFC 6066. If enabled (and requested by the client), mod_ssl will include an OCSP response for its own certificate in the TLS handshake. OCSP Stapling is a pretty simple check that web servers should turn on to provide a performance benefit to any browsers which do OCSP checking.	1
SSLSessionCache	This configures the storage type of the global/inter-process SSL Session Cache. This cache is an optional facility which speeds up parallel request processing. VDISABLE: This disables the global/inter-process Session Cache. This will incur a noticeable speed penalty and may cause problems if using certain browsers, particularly if client certificates are enabled. This setting is not recommended. VENABLE: This makes use of a DBM hashfile on the local disk to synchronize the local OpenSSL memory caches of the server processes. This session cache may suffer reliability issues under high load. VENABLE: This makes use of a high-performance cyclic buffer (approx. size bytes in size) inside a shared memory segment in RAM (established via "path to datafile") to synchronize the local OpenSSL memory caches of the server processes. This is the recommended session cache. VENABLE: This makes use of the distcache distributed session caching libraries.	1
SSLOptions.OptRenegotiate	This enables optimized SSL connection renegotiation handling when SSL directives are used in perdirectory context. By default a strict scheme is enabled where every perdirectory reconfiguration of SSL parameters causes a full SSL renegotiation handshake. When this option is used COTHER tries to avoid unnecessary handshakes by doing more granular (but still safe) parameter checks. Nevertheless these granular checks sometimes may not be what the user expects, so enable this on a perdirectory basis only, please.	1
SessionExpiryUpdateInterval	The CSELF directive allows sessions to avoid the cost associated with writing the session each request when only the expiry time has changed. This can be used to make a website more efficient or reduce load on a database when using COTHER. The session is always written if the data stored in the session has changed or the expiry has changed by more than the configured interval. Setting the interval to zero disables this directive, and the session expiry is refreshed for each request.	1
DBDPrepareSQL	For modules such as authentication that repeatedly use a single SQL statement, optimum performance is achieved by preparing the statement at startup rather than every time it is used. This directive prepares an SQL statement and assigns it a label.	1
ProxySCGISendfile	The CSELF directive enables the SCGI backend to let files be served directly by the gateway. This is useful for performance purposes — httpd can use sendfile or other optimizations, which are not possible if the file comes over the backend socket.	1
MDStapleOthers	Enable stapling for certificates not managed by COTHER. OCSP Stapling is a pretty simple check that web servers should turn on to provide a performance benefit to any browsers which do OCSP checking.	1
net.serviceExecutor	Determines the threading and execution model mongos or mongod uses to execute client requests. VDISABLE: The mongos or mongod uses synchronous networking and manages its networking thread pool on a per connection basis. Previous versions of MongoDB managed threads in this way. VENABLE: The mongos or mongod uses the new experimental asynchronous networking mode with an adaptive thread pool which manages threads on a per request basis. This mode should have more consistent performance and use less resources when there are more inactive connections than database requests.	1
storage.mmapv1.preallocDataFiles	Enables or disables the preallocation of data files.	1
ldapUseConnectionPool	Specifies whether MongoDB should use connection pooling when connecting to the LDAP server for authentication/authorization. In software engineering, a connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required. Connection pools are used to enhance the performance of executing commands on a database.	1
ldapConnectionPoolUseLatencyForHostPriority	A boolean that determines whether the LDAP connection pool (see COTHER) should use latency of the LDAP servers to determine the connection order (from lowest latency to highest).	1
disableJavaScriptJIT	The MongoDB JavaScript engine uses SpiderMonkey, which implements Just-in-Time (JIT) compilation for improved performance when running scripts. To enable the JIT, set CSELF to VDISABLE.	1
enableElectionHandoff	A flag that can reduce the downtime after the primary steps down from either the rs.stepDown() method or the replSetStepDown command.	1
huge_pages	Controls whether huge pages are requested for the main shared memory area. The use of huge pages results in smaller page tables and less CPU time spent on memory management, increasing performance.	1
wal_recycle	If set to VENABLE (the default), this option causes WAL files to be recycled by renaming them, avoiding the need to create new ones. On COW file systems, it may be faster to create new ones.	1
enable_bitmapscan	Enables or disables the query planner's use of bitmap-scan plan types. The default is on. The task of the planner/optimizer is to create an optimal execution plan. A given SQL query (and hence, a query tree) can be actually executed in a wide variety of different ways, each of which will produce the same set of results. If it is computationally feasible, the query optimizer will examine each of these possible execution plans, ultimately selecting the execution plan that is expected to run the fastest.	1
geqo	Enables or disables genetic query optimization. This is on by default. It is usually best not to turn it off in production.	1
constraint_exclusion	Controls the query planner's use of table constraints to optimize queries. The allowed values of CSELF are VENABLE (examine constraints for all tables), VDISABLE (never examine constraints), and VOTHER (examine constraints only for inheritance child tables and UNION ALL subqueries). partition is the default setting. It is often used with traditional inheritance trees to improve performance.	1
synchronize_seqscans	This allows sequential scans of large tables to synchronize with each other, so that concurrent scans read the same block at about the same time and hence share the I/O workload.	1
enableLookups	Set to VENABLE if you want calls to request.getRemoteHost() to perform DNS lookups in order to return the actual host name of the remote client. Set to VDISABLE to skip the DNS lookup and return the IP address in String form instead thereby improving performance. By default, DNS lookups are disabled.	1
tcpNoDelay	If set to VENABLE, the CSELF option will be set on the server socket, which improves performance under most circumstances. This is set to VENABLE by default.	1
aof-use-rdb-preamble	When rewriting the AOF file, Redis is able to use an RDB preamble in the AOF file for faster rewrites and recoveries. When this option is turned on the rewritten AOF file is composed of two different stanzas : [RDB file][AOF tail]. When loading Redis recognizes that the AOF file starts with the "REDIS" string and loads the prefixed RDB file, and continues loading the AOF tail.	1
global_internal_static	This directive controls if Squid should intercept all requests for /squid-internal-static/ no matter which host the URL is requesting (default on setting), or if nothing special should be done for such URLs (off setting). The purpose of this directive is to make icons etc work better in complex cache hierarchies where it may not always be possible for all corners in the cache mesh to reach the server generating a directory listing.	1
threadRenewalDelay	If a COTHER is configured, it will notify this executor about stopped contexts. After a context is stopped, threads in the pool are renewed. To avoid renewing all threads at the same time, this option sets a delay between renewal of any 2 threads.	1
soTimeout	The sending and receiving of heartbeats is done on a single thread, hence to avoid blocking this thread forever, you can control the SO_TIMEOUT value on this socket.	1
tcp-backlog 	TCP listen() backlog. In high requests-per-second environments you need an high backlog in order to avoid slow clients connections issues. Note that the Linux kernel will silently truncate it to the value of /proc/sys/net/core/somaxconn so make sure to raise both the value of somaxconn and tcp_max_syn_backlog in order to get the desired effect.	1
auto-aof-rewrite-percentage	Automatic rewrite of the append only file. Redis is able to automatically rewrite the log file implicitly calling BGREWRITEAOF when the AOF log size grows by the specified percentage. This is how it works : Redis remembers the size of the AOF file after the latest rewrite (if no rewrite has happened since the restart, the size of the AOF at startup is used). This base size is compared to the current size. If the current size is bigger than the specified percentage, the rewrite is triggered. Also you need to specify a minimal size for the AOF file to be rewritten, this is useful to avoid rewriting the AOF file even if the percentage increase is reached but it is still pretty small. Specify a percentage of zero in order to disable the automatic AOF rewrite feature.	1
external_refresh_check	This option defines an external helper for determining whether to refresh a stale response. It will be called when Squid receives a request for a cached response that is stale; the helper can either confirm that the response is stale with a STALE response, or extend the freshness of the response, thereby avoiding a refresh check with a FRESH response, along with a freshness=nnn keyword.	1
client-query-buffer-limit	Client query buffers accumulate new commands. They are limited to a fixed amount by default in order to avoid that a protocol desynchronization (for instance due to a bug in the client) will lead to unbound memory usage in the query buffer. However you can configure it here if you have very special needs, such us huge multi/exec requests or alike.	1
dynamic-hz	Normally it is useful to have an HZ value which is proportional to the number of clients connected. This is useful in order, for instance, to avoid too many clients are processed for each background task invocation in order to avoid latency spikes. Since the default HZ value by default is conservatively set to 10, Redis offers, and enables by default, the ability to use an adaptive HZ value which will temporary raise when there are many connected clients. When dynamic HZ is enabled, the actual configured HZ will be used as as a baseline, but multiples of the configured HZ value will be actually used as needed once more clients are connected. In this way an idle instance will use little CPU time while a busy instance will be more responsive.	1
aof-rewrite-incremental-fsync	When a child rewrites the AOF file, if the following option is enabled the file will be fsync-ed every 32 MB of data generated. This is useful in order to commit the file to the disk more incrementally and avoid big latency spikes.	1
rdb-save-incremental-fsync	When redis saves RDB file, if the following option is enabled the file will be fsync-ed every 32 MB of data generated. This is useful in order to commit the file to the disk more incrementally and avoid big latency spikes.	1
icap_preview_enable	The ICAP Preview feature allows the ICAP server to handle the HTTP message by looking only at the beginning of the message body or even without receiving the body at all. In some environments, previews greatly speedup ICAP processing.	1
processorCache	The protocol handler caches Processor objects to speed up performance. This setting dictates how many of these objects get cached.	1
closeMethod	Name of the zero-argument method to call on a singleton resource when it is no longer required. This is intended to speed up cleanup of resources that would otherwise happen as part of garbage collection. This attribute is ignored if the singleton attribute is VDISABLE.	1
eq_range_index_dive_limit	Limit used to speed up queries listed by long nested INs. The optimizer will use existing index statistics instead of doing index dives for equality ranges if the number of equality ranges for the index is larger than or equal to this number. If set to 0 (unlimited, the default), index dives are always used.	1
expensive_subquery_limit	Number of rows to be examined for a query to be considered expensive, that is, maximum number of rows a subquery may examine in order to be executed during optimization and used for constant optimization.	1
optimizer_prune_level	If set to VENABLE, the default, the optimizer will use heuristics to prune less-promising partial plans from the optimizer search space. If set to VDISABLE, heuristics are disabled and an exhaustive search is performed.	1
innodb_adaptive_hash_index	If set to VENABLE, the default until MariaDB 10.5, the InnoDB hash index is enabled. Based on performance testing, the InnoDB adaptive hash index helps performance in mostly read-only workloads, and could slow down performance in other environments, especially DROP TABLE, TRUNCATE TABLE, ALTER TABLE, or DROP INDEX operations.	1
key_cache_file_hash_size	Number of hash buckets for open and changed files. If you have many MyISAM files open you should increase this for faster flushing of changes. A good value is probably 1/10th of the number of possible open MyISAM files.	1
spider_remote_access_charset	Forces session character set when connecting to the backend server. This can improve connection time performance.	1
spider_remote_autocommit	Sets the auto-commit mode when connecting to backend servers. This can improve connection time performance.	1
spider_remote_default_database	Sets the local default database when connecting to backend servers. This can improve connection time performance.	1
spider_remote_time_zone	Forces the time zone setting when connecting to backend servers. This can improve connection performance when you know the time zone.	1
thread_pool_min_threads	In bursty environments, after a period of inactivity, threads would normally be retired. When the next burst arrives, it would take time to reach the optimal level. Setting this value higher than the default would prevent thread retirement even if inactive.	1
tokudb_optimize_throttle	Table optimization utilizes all available resources by default. This variable allows the table optimization speed to be limited in order to reduce the overall resources used. The limit places an upper bound on the number of fractal tree leaf nodes that are optimized per second. 0, the default, imposes no limit.	1
